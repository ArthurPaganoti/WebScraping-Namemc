<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/__main__.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/__main__.py" />
              <option name="originalContent" value="import requests&#10;import time&#10;import json&#10;from bs4 import BeautifulSoup&#10;&#10;API_KEY = &quot;CAP-F5238D35CBD407280A722AEC24E62FB22B065F6412A88E3A1E4A254AD7049B36&quot;&#10;SITE_URL = &quot;https://pt.namemc.com/minecraft-names?offset=3196800&amp;sort=desc&quot;&#10;SITE_KEY = &quot;0x4AAAAAAADnOjc0PNeA8qVm&quot;&#10;&#10;HEADERS = {&#10;    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36',&#10;    'Accept-Language': 'pt-BR,pt;q=0.9,en-US;q=0.8,en;q=0.7',&#10;}&#10;&#10;def get_turnstile_token(api_key, site_key, site_url):&#10;    payload = {&#10;        &quot;clientKey&quot;: api_key,&#10;        &quot;task&quot;: {&#10;            &quot;type&quot;: &quot;AntiTurnstileTaskProxyLess&quot;,&#10;            &quot;websiteKey&quot;: site_key,&#10;            &quot;websiteURL&quot;: site_url&#10;        }&#10;    }&#10;    res = requests.post(&quot;https://api.capsolver.com/createTask&quot;, json=payload)&#10;    task_id = res.json().get(&quot;taskId&quot;)&#10;    if not task_id:&#10;        print(&quot;Erro ao criar task:&quot;, res.text)&#10;        return None&#10;    while True:&#10;        time.sleep(2)&#10;        res = requests.post(&quot;https://api.capsolver.com/getTaskResult&quot;, json={&#10;            &quot;clientKey&quot;: api_key,&#10;            &quot;taskId&quot;: task_id&#10;        })&#10;        data = res.json()&#10;        if data.get(&quot;status&quot;) == &quot;ready&quot;:&#10;            return data[&quot;solution&quot;][&quot;token&quot;]&#10;        if data.get(&quot;status&quot;) == &quot;failed&quot; or data.get(&quot;errorId&quot;):&#10;            print(&quot;Falha ao resolver captcha:&quot;, res.text)&#10;            return None&#10;&#10;def get_namemc_page(token):&#10;    url = SITE_URL&#10;    headers = HEADERS.copy()&#10;    headers['cf-turnstile-response'] = token&#10;    cookies = {'cf-turnstile-response': token}&#10;    resp = requests.get(url, headers=headers, cookies=cookies)&#10;    return resp.text&#10;&#10;def extrair_nomes(html):&#10;    soup = BeautifulSoup(html, &quot;html.parser&quot;)&#10;    nomes = []&#10;    for a in soup.select('.card-body a'):&#10;        nome = a.get_text(strip=True)&#10;        if nome:&#10;            nomes.append({&quot;nome&quot;: nome})&#10;    with open(&quot;namemc_nomes.json&quot;, &quot;w&quot;, encoding=&quot;utf-8&quot;) as f:&#10;        json.dump(nomes, f, ensure_ascii=False, indent=2)&#10;    print(f&quot;{len(nomes)} nomes salvos em namemc_nomes.json&quot;)&#10;&#10;if __name__ == &quot;__main__&quot;:&#10;    print(&quot;Resolvendo captcha...&quot;)&#10;    token = get_turnstile_token(API_KEY, SITE_KEY, SITE_URL)&#10;    if not token:&#10;        print(&quot;Não foi possível resolver o captcha.&quot;)&#10;        exit(1)&#10;    print(&quot;Captcha resolvido, acessando página...&quot;)&#10;    html = get_namemc_page(token)&#10;    extrair_nomes(html)&#10;" />
              <option name="updatedContent" value="import requests&#10;import time&#10;import json&#10;import random&#10;from bs4 import BeautifulSoup&#10;&#10;API_KEY = &quot;CAP-F5238D35CBD407280A722AEC24E62FB22B065F6412A88E3A1E4A254AD7049B36&quot;&#10;SITE_URL = &quot;https://pt.namemc.com/minecraft-names?offset=3196800&amp;sort=desc&quot;&#10;SITE_KEY = &quot;0x4AAAAAAADnOjc0PNeA8qVm&quot;&#10;&#10;HEADERS = {&#10;    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36',&#10;    'Accept-Language': 'pt-BR,pt;q=0.9,en-US;q=0.8,en;q=0.7',&#10;}&#10;&#10;def get_random_proxy_uri():&#10;    &quot;&quot;&quot;&#10;    Retorna uma URI de proxy aleatória.&#10;    &quot;&quot;&quot;&#10;    random_number = random.randint(10001, 10100)&#10;    return f&quot;http://spkt1yrhhb:kf54FKIoeImfigz3+0@dc.decodo.com:{random_number}&quot;&#10;&#10;def get_turnstile_token(api_key, site_key, site_url, proxy_uri=None):&#10;    payload = {&#10;        &quot;clientKey&quot;: api_key,&#10;        &quot;task&quot;: {&#10;            &quot;type&quot;: &quot;AntiTurnstileTaskProxyLess&quot;,&#10;            &quot;websiteKey&quot;: site_key,&#10;            &quot;websiteURL&quot;: site_url&#10;        }&#10;    }&#10;    proxies = {&quot;http&quot;: proxy_uri, &quot;https&quot;: proxy_uri} if proxy_uri else None&#10;    res = requests.post(&quot;https://api.capsolver.com/createTask&quot;, json=payload, proxies=proxies)&#10;    task_id = res.json().get(&quot;taskId&quot;)&#10;    if not task_id:&#10;        print(&quot;Erro ao criar task:&quot;, res.text)&#10;        return None&#10;    while True:&#10;        time.sleep(2)&#10;        res = requests.post(&quot;https://api.capsolver.com/getTaskResult&quot;, json={&#10;            &quot;clientKey&quot;: api_key,&#10;            &quot;taskId&quot;: task_id&#10;        }, proxies=proxies)&#10;        data = res.json()&#10;        if data.get(&quot;status&quot;) == &quot;ready&quot;:&#10;            return data[&quot;solution&quot;][&quot;token&quot;]&#10;        if data.get(&quot;status&quot;) == &quot;failed&quot; or data.get(&quot;errorId&quot;):&#10;            print(&quot;Falha ao resolver captcha:&quot;, res.text)&#10;            return None&#10;&#10;def get_namemc_page(token):&#10;    url = SITE_URL&#10;    headers = HEADERS.copy()&#10;    headers['cf-turnstile-response'] = token&#10;    cookies = {'cf-turnstile-response': token}&#10;    resp = requests.get(url, headers=headers, cookies=cookies)&#10;    return resp.text&#10;&#10;def extrair_nomes(html):&#10;    soup = BeautifulSoup(html, &quot;html.parser&quot;)&#10;    nomes = []&#10;    for a in soup.select('.card-body a'):&#10;        nome = a.get_text(strip=True)&#10;        if nome:&#10;            nomes.append({&quot;nome&quot;: nome})&#10;    with open(&quot;namemc_nomes.json&quot;, &quot;w&quot;, encoding=&quot;utf-8&quot;) as f:&#10;        json.dump(nomes, f, ensure_ascii=False, indent=2)&#10;    print(f&quot;{len(nomes)} nomes salvos em namemc_nomes.json&quot;)&#10;&#10;if __name__ == &quot;__main__&quot;:&#10;    print(&quot;Resolvendo captcha...&quot;)&#10;    proxy_uri = get_random_proxy_uri()&#10;    token = get_turnstile_token(API_KEY, SITE_KEY, SITE_URL, proxy_uri)&#10;    if not token:&#10;        print(&quot;Não foi possível resolver o captcha.&quot;)&#10;        exit(1)&#10;    print(&quot;Captcha resolvido, acessando página...&quot;)&#10;    html = get_namemc_page(token)&#10;    extrair_nomes(html)" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>